
Why O(n)? 

Consider bit operation in chapter 1.

addition: O(n)
multiplication: O(n^2)
division: O(n^2)


modular: 
addition (x+y)%N :  addition(O(n)), substraction: O(n)
multiplication (x*y)%N: 
x < N-1, y < N-1
x*y -> O(n^2); remainder = (x*y)/N -> O(n^2)


(nO(n^2) including division/N -> O(n^2)

division: O(n^3)

modular exp: 
(x^(y/2))^2 % N        y%2 == 0
(x * (x^(y/2))^2) % N  y%2 == 1

%N -> almost n bit, thus n^2 for each recursive call

%N -> using division(O(n^2))

降低数量级: / 2

x * 25 = x * (16+8+1)

欧几里德rule
gcd(a, b) = gcd(b, a%b)


extension_elucid

d = gcd(a, b) = gcd(b, a%b)

d = ax + by = b*x1 + (a%b)*y1

a%b = a-(a/b)*b

-> d = b*x1 + (a-(a/b)*b)*y1 = a*y1 + b*(x1 -(a/b)*y1)


a%N = a - (a/N)*N = a - kN where k = (a/N)


% <=> remainder in division


ax = (1%N)

gcd(a, N) = a*x + k*N

if gcd(a, N) > 1, (a*x + k*N) % N > 1

so if gcd(a, N) > 1, no inverse is existing

if gcd(a, N) = 1 = a*x + k*N, 

k->y, gcd(a, N) = 1 = a*x + y*N

ex, calc 11^(-1) % 25:

a = 11, N = 25

a*x + 25*y = 1 => -34 * 11(a) + 15 * 25(N) = 1

11^(-1) % 25 = (-34) % 25 = 25*20-34 = 16 % 25


modular division:

a has inverse N <=> gcd(a, N) = 1

test primality:
if p is prime, then 1 < a < p;

a^(p-1) = 1%p

反过来:

if N is prime, for all 0 < a < N,   // p->N
	a^(p-1) = 1 % N
else: for at most half of N, 
	a^(p-1) = 1 % N


Pr(test_primality = true) is 1 if N is prime
Pr(test_primality = true) is <= 1/2 if N is not prime

repeat it k times
Pr(test_primality = true) < 1/(2^k) if N is not prime


rsa:
N=55, (p-1)*(q-1) = 4 * 10 = 40
e =3 , gcd(e, (p-1)*(q-1)) = 1 = x * e + y * (p-1) * (q-1)
=> 3 * x + 40 * y = 1
=> x = 27, y = -1
=> e^(-1) % (p-1)(q-1) = x % (p-1)(q-1)
=> d = 27
=> y = x^e % N;  x = y^d % N


homework:
1.11: (4^1536 - 9^4824) % 35
1.12 2^2^2008 ^ 3
1.13 (5^30000 - 6^123456) % 31










